{
	"name": "df_silver_clientes",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_bronze_clientes",
						"type": "DatasetReference"
					},
					"name": "clientes"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_bronze_clientes_BD_GEN",
						"type": "DatasetReference"
					},
					"name": "clientesGen"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_bronze_clientes_location",
						"type": "DatasetReference"
					},
					"name": "clientesLocation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver_clientes_unificados",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cst_id as string,",
				"          cst_key as string,",
				"          cst_firstname as string,",
				"          cst_lastname as string,",
				"          cst_marital_status as string,",
				"          cst_gndr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> clientes",
				"source(output(",
				"          CID as string,",
				"          BDATE as string,",
				"          GEN as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> clientesGen",
				"source(output(",
				"          CID as string,",
				"          CNTRY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> clientesLocation",
				"clientes derive(cst_key = substring(cst_key, 3, 20)) ~> derivedColumn1",
				"clientesGen derive(CID = substring(CID, 6, 20)) ~> derivedColumn2",
				"clientesLocation derive(CID = substring(CID, 4, 20)) ~> derivedColumn3",
				"derivedColumn1, derivedColumn2 join(cst_key == CID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, derivedColumn3 join(cst_key == derivedColumn3@CID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(cst_lastname = concat(concat(cst_firstname, ' '), cst_lastname),",
				"          cst_marital_status = iif(cst_marital_status == 'M', 'Casado',iif(cst_marital_status == 'S', 'Soltero', 'Otro')),",
				"          cst_gndr = iif(isNull(GEN) || GEN == '', iif(cst_gndr == 'M', 'Male', 'Female'), GEN)) ~> derivedColumn4",
				"derivedColumn4 select(mapColumn(",
				"          cst_id,",
				"          cst_key,",
				"          cst_lastname,",
				"          cst_marital_status,",
				"          cst_gndr,",
				"          BDATE,",
				"          CNTRY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(cst_lastname = upper(trim(replace(replace(cst_lastname, '-', ''), ' ', ' '))),",
				"          cst_marital_status = upper(trim(replace(replace(cst_marital_status, '-', ''), ' ', ''))),",
				"          cst_gndr = upper(trim(replace(replace(cst_gndr, '-', ''), ' ', ''))),",
				"          CNTRY = upper(trim(replace(replace(CNTRY, '-', ''), ' ', '')))) ~> derivedColumn5",
				"derivedColumn5 derive(cst_gndr = iif(",
				"  isNull(cst_gndr) || trim(cst_gndr) == '' || trim(cst_gndr) == 'NULL',",
				"  'Unknown',",
				"  upper(trim(cst_gndr))",
				"),",
				"          cst_lastname = iif(   isNull(cst_lastname) || trim(cst_lastname) == '' || trim(cst_lastname) == 'NULL',   'NOMBRE DESCONOCIDO',   upper(trim(replace(cst_lastname, '  ', ' '))) ),",
				"          cst_marital_status = iif(   isNull(cst_marital_status) || trim(cst_marital_status) == '' || trim(cst_marital_status) == 'NULL',   'DESCONOCIDO',   upper(trim(cst_marital_status)) ),",
				"          CNTRY = iif(   isNull(CNTRY) || trim(CNTRY) == '' || trim(CNTRY) == 'NULL',   'UNKNOWN',   upper(trim(CNTRY)) )) ~> derivedColumn6",
				"derivedColumn6 cast(output(",
				"          cst_id as integer,",
				"          cst_key as string,",
				"          BDATE as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cst_id as integer,",
				"          cst_key as string,",
				"          nombre_completo as string,",
				"          estado_civil as string,",
				"          genero as string,",
				"          fecha_nacimiento as date,",
				"          pais as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cst_id,",
				"          cst_key,",
				"          nombre_completo = cst_lastname,",
				"          estado_civil = cst_marital_status,",
				"          genero = cst_gndr,",
				"          fecha_nacimiento = BDATE,",
				"          pais = CNTRY",
				"     )) ~> sink1"
			]
		}
	}
}